rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ---- 共通ユーティリティ ----
    function isSignedIn() {
      return request.auth != null;
    }
    function isMember(projectId) {
      return isSignedIn() &&
        exists(/databases/$(database)/documents/projects/$(projectId)/members/$(request.auth.uid));
    }
    function role(projectId) {
      return get(/databases/$(database)/documents/projects/$(projectId)/members/$(request.auth.uid)).data.role;
    }
    function isAdmin(projectId) {
      return isSignedIn() && role(projectId) == 'admin';
    }
    function isEditor(projectId) {
      return isSignedIn() && (role(projectId) in ['admin','member']);
    }
    function isValidRole(newRole) {
      return newRole in ['admin', 'member', 'viewer'];
    }

    // ---- プロジェクトツリー ----
    match /projects/{projectId} {

      // Analytics summary (集計結果のダッシュボード用)
      match /analytics/currentSummary {
        allow read: if isMember(projectId);
        allow create, update, delete: if false;
      }

      // プロジェクト直下の読み取りはメンバーのみ
      allow read: if isMember(projectId);

      // 監査ログ
      match /auditLogs/{logId} {
        allow read: if isMember(projectId);
        allow create, update, delete: if false;
      }

      // 新規プロジェクトの作成
      allow create: if isSignedIn()
        && request.resource.data.keys().hasOnly(['meta'])
        && request.resource.data.meta.keys().hasOnly(['name','createdBy','createdAt'])
        && request.resource.data.meta.createdBy == request.auth.uid;

      // 既存プロジェクトの更新/削除は admin のみ
      allow update, delete: if isAdmin(projectId);

      // members 管理
      match /members/{uid} {
        allow read: if isMember(projectId);

        allow create: if isSignedIn()
          && request.auth.uid == uid
          && request.resource.data.keys().hasOnly(['role','joinedAt','displayName','email'])
          && request.resource.data.role == 'admin';

        allow create, update: if isSignedIn()
          && request.auth.uid == uid
          && request.resource.data.keys().hasOnly(['role','joinedAt','inviteId','invitedBy','displayName','email'])
          && (request.resource.data.role in ['member','viewer'])
          && request.auth.token.email != null
          && exists(/databases/$(database)/documents/projects/$(projectId)/invites/$(request.resource.data.inviteId))
          && get(/databases/$(database)/documents/projects/$(projectId)/invites/$(request.resource.data.inviteId)).data.email
             == request.auth.token.email;

        allow update: if isAdmin(projectId)
          && request.resource.data.keys().hasOnly(['role','joinedAt'])
          && isValidRole(request.resource.data.role);

        allow delete: if (isSignedIn() && request.auth.uid == uid && resource.data.role in ['member','viewer'])
                      || isAdmin(projectId);
      }

      // invites
      match /invites/{token} {
        allow get: if true;
        allow list: if isAdmin(projectId);
        allow create: if isAdmin(projectId);

        allow update: if isSignedIn()
          && request.auth.token.email != null
          && resource.data.email == request.auth.token.email
          && resource.data.redeemedBy == null
          && request.resource.data.diff(resource.data).changedKeys().hasOnly(['redeemedBy','redeemedAt'])
          && request.resource.data.redeemedBy == request.auth.uid;

        allow delete: if isAdmin(projectId);
      }

      // --- カンバン列(boardColumns)のバリデーション ---
      function isValidBoardColumn(col) {
        return col.keys().hasOnly([
          'columnId',
          'title',
          'order',
          'categoryHint',
          'progressHint'
        ])
        && (!('title' in col)
          || ((col.title is string)
              && col.title.size() >= 0
              && col.title.size() <= 120))
        && (!('order' in col)
          || (col.order is int || col.order is float))
        && (!('categoryHint' in col)
          || (col.categoryHint in ['not_started','in_progress','done']))
        && (!('progressHint' in col)
          || ((col.progressHint is int || col.progressHint is float)
              && col.progressHint >= 0
              && col.progressHint <= 100))
        && (!('columnId' in col)
          || (col.columnId is string && col.columnId.size() > 0 && col.columnId.size() <= 200));
      }

      match /boardColumns/{columnId} {
        // 読み取り：メンバーならOK → これでUIがfallbackしなくなる
        allow read: if isMember(projectId);

        // 作成・更新：エディターかつpayloadが妥当
        allow create, update: if isEditor(projectId)
          && isValidBoardColumn(request.resource.data);

        // 削除：エディターならOK（request.resource.data は存在しないのでバリデしない）
        allow delete: if isEditor(projectId);
      }

      // Problems
      match /problems/{problemId} {
        allow read: if isMember(projectId);

        function validProblemDef(def) {
          return def.keys().hasOnly(['phenomenon','cause','solution','goal','updatedAt','updatedBy'])
            && (def.phenomenon is string) && (def.goal is string)
            && def.phenomenon.matches('^[\\s\\S]{1,1000}$')
            && def.goal.matches('^[\\s\\S]{1,500}$')
            && (!('cause' in def) || (def.cause is string && def.cause.matches('^[\\s\\S]{0,1000}$')))
            && (!('solution' in def) || (def.solution is string && def.solution.matches('^[\\s\\S]{0,1000}$')))
            && (!('updatedBy' in def) || def.updatedBy == request.auth.uid);
        }

        function validAttachmentData(d) {
          return d.keys().hasOnly([
                   'name','contentType','size','storagePath','downloadURL',
                   'createdAt','updatedAt','createdBy'
                 ])
                 && (d.name is string) && d.name.size() > 0 && d.name.size() <= 200
                 && (d.contentType is string) && d.contentType.size() > 0
                 && ((d.size is int) || (d.size is float)) && d.size >= 0 && d.size <= 20 * 1024 * 1024
                 && (d.storagePath is string) && d.storagePath.size() > 0
                 && (d.downloadURL is string) && d.downloadURL.size() > 0
                 && (d.createdBy is string) && d.createdBy == request.auth.uid;
        }

        allow create, update: if isEditor(projectId)
          && (
            !('problemDef' in request.resource.data)
            || validProblemDef(request.resource.data.problemDef)
          );

        allow delete: if isEditor(projectId);

        match /attachments/{attId} {
          allow read: if isMember(projectId);
          allow create: if isEditor(projectId) && validAttachmentData(request.resource.data);
          allow update: if isEditor(projectId)
            && request.resource.data.keys().hasOnly(['name','updatedAt'])
            && (request.resource.data.name is string)
            && request.resource.data.name.size() > 0
            && request.resource.data.name.size() <= 200;
          allow delete: if isEditor(projectId);
        }

        match /comments/{commentId} {
          allow read: if isMember(projectId);
          allow create: if isEditor(projectId)
                        && request.resource.data.authorId == request.auth.uid;
          allow update, delete: if (
            (request.auth != null && resource.data.authorId == request.auth.uid)
            || isAdmin(projectId)
          );
        }

        match /issues/{issueId} {
          allow read: if isMember(projectId);

          function validIssueLinks(arr) {
            return arr is list && arr.size() <= 200;
          }

          allow create, update: if isEditor(projectId)
            && (!('links' in request.resource.data) || validIssueLinks(request.resource.data.links));

          allow delete: if isEditor(projectId);

          match /attachments/{attId} {
            allow read: if isMember(projectId);
            allow create: if isEditor(projectId) && validAttachmentData(request.resource.data);
            allow update: if isEditor(projectId)
              && request.resource.data.keys().hasOnly(['name','updatedAt'])
              && (request.resource.data.name is string)
              && request.resource.data.name.size() > 0
              && request.resource.data.name.size() <= 200;
            allow delete: if isEditor(projectId);
          }

          match /comments/{commentId} {
            allow read: if isMember(projectId);
            allow create: if isEditor(projectId)
                          && request.resource.data.authorId == request.auth.uid;
            allow update, delete: if (
              (request.auth != null && resource.data.authorId == request.auth.uid)
              || isAdmin(projectId)
            );
          }

          match /tasks/{taskId} {
            allow read: if isMember(projectId);
            allow create, update, delete: if isEditor(projectId);

            match /attachments/{attId} {
              allow read: if isMember(projectId);
              allow create: if isEditor(projectId) && validAttachmentData(request.resource.data);
              allow update: if isEditor(projectId)
                && request.resource.data.keys().hasOnly(['name','updatedAt'])
                && (request.resource.data.name is string)
                && request.resource.data.name.size() > 0
                && request.resource.data.name.size() <= 200;
              allow delete: if isEditor(projectId);
            }

            match /comments/{commentId} {
              allow read: if isMember(projectId);
              allow create: if isEditor(projectId)
                            && request.resource.data.authorId == request.auth.uid;
              allow update, delete: if (
                (request.auth != null && resource.data.authorId == request.auth.uid)
                || isAdmin(projectId)
              );
            }
          }
        }
      }
    } // end match /projects/{projectId}

    // ---- users コレクション（本人専用のサブコレクション制御）----
    match /users/{uid} {
      allow read, write: if false;

      match /memberships/{projectId} {
        allow read:   if isSignedIn() && request.auth.uid == uid;
        allow create: if isSignedIn() && request.auth.uid == uid;
        allow update: if isSignedIn() && request.auth.uid == uid;
        allow delete: if isSignedIn() && (request.auth.uid == uid || isAdmin(projectId));
      }

      match /fcmTokens/{token} {
        allow read: if false;
        allow create, update, delete: if isSignedIn() && request.auth.uid == uid;
      }

      match /fcmStatus/{docId} {
        allow read: if isSignedIn() && request.auth.uid == uid;
        allow create, update: if isSignedIn()
          && request.auth.uid == uid
          && request.resource.data.keys().hasOnly(['enabled','lastTokenSavedAt','lastError']);
        allow delete: if false;
      }
    }

    // === collectionGroup('tasks') 用 ===
    match /{path=**}/tasks/{taskId} {
      allow read: if isMember(resource.data.projectId);
      // allow create, update, delete: if isEditor(request.resource.data.projectId);
    }
  }
}





