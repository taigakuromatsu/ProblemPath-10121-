// firestore.rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ---- 共通ユーティリティ ----
    function isSignedIn() {
      return request.auth != null;
    }
    function isMember(projectId) {
      return isSignedIn() &&
        exists(/databases/$(database)/documents/projects/$(projectId)/members/$(request.auth.uid));
    }
    function role(projectId) {
      return get(/databases/$(database)/documents/projects/$(projectId)/members/$(request.auth.uid)).data.role;
    }
    function isAdmin(projectId) {
      return role(projectId) == 'admin';
    }
    function isEditor(projectId) {
      return role(projectId) in ['admin', 'member'];
    }
    function isValidRole(newRole) {
      return newRole in ['admin', 'member', 'viewer'];
    }

    // ---- プロジェクトツリー ----
    match /projects/{projectId} {

      // 読み取りはメンバーのみ
      allow read: if isMember(projectId);

      // 【ブートストラップ例外】新規作成（meta だけ）を「作成者=自分」のとき許可
      // → 初回ログインユーザーが自分のプロジェクトを作成できる
      allow create: if isSignedIn()
        && request.resource.data.keys().hasOnly(['meta'])
        && request.resource.data.meta.keys().hasOnly(['name','createdBy','createdAt'])
        && request.resource.data.meta.createdBy == request.auth.uid;

      // 既存プロジェクトの更新/削除は admin のみ
      allow update, delete: if isAdmin(projectId);

      // members 管理
      match /members/{uid} {
        // 閲覧はメンバー全員
        allow read: if isMember(projectId);

        // 【ブートストラップ例外】作成直後に「自分を admin で登録」は本人に許可
        allow create: if isSignedIn()
          && request.auth.uid == uid
          && request.resource.data.keys().hasOnly(['role','joinedAt','displayName','email'])
          && request.resource.data.role == 'admin';

        // 以降のメンバー管理は admin のみ
        allow update, delete: if isAdmin(projectId)
          && request.resource.data.keys().hasOnly(['role','joinedAt','displayName','email'])
          && (!('role' in request.resource.data) || isValidRole(request.resource.data.role));

        // ★ 招待リンク経由の参加を許可（本人のみ / member or viewer）
        // クライアントは create 時に { role, joinedAt, inviteId, invitedBy } を書く。
        // ルールは projects/{pid}/invites/{inviteId} の email と本人の email を照合。
        allow create, update: if isSignedIn()
        && request.auth.uid == uid
        && request.resource.data.keys().hasOnly(['role','joinedAt','inviteId','invitedBy','displayName','email'])
        && (request.resource.data.role in ['member','viewer'])
        && request.auth.token.email != null
        && exists(/databases/$(database)/documents/projects/$(projectId)/invites/$(request.resource.data.inviteId))
        && get(/databases/$(database)/documents/projects/$(projectId)/invites/$(request.resource.data.inviteId)).data.email
           == request.auth.token.email;
    }

      // invites （トークン=docId を前提に “知っている人だけ読める” 方式）
      match /invites/{token} {
        allow get: if true; // ランダムID前提で公開GET可（推測困難）
        allow list: if false;
        allow create: if isAdmin(projectId);
        // 招待された本人が「未使用の招待」を使用済みにできる
        allow update: if isSignedIn()
        && request.auth.token.email != null
        && resource.data.email == request.auth.token.email
        && resource.data.redeemedBy == null
        && request.resource.data.diff(resource.data).changedKeys().hasOnly(['redeemedBy','redeemedAt'])
        && request.resource.data.redeemedBy == request.auth.uid;
        // delete は従来どおり admin のみ
        allow delete: if isAdmin(projectId);
      }


      // Problems
      match /problems/{problemId} {
        allow read: if isMember(projectId);
        allow create, update, delete: if isEditor(projectId);

        // Issues
        match /issues/{issueId} {
          allow read: if isMember(projectId);
          allow create, update, delete: if isEditor(projectId);

          // Tasks
          match /tasks/{taskId} {
            allow read: if isMember(projectId);
            allow create, update, delete: if isEditor(projectId);
          }
        }
      }
    }

    // ---- users コレクション（本人専用）----
    match /users/{uid} {
      allow read, write: if isSignedIn() && request.auth.uid == uid;

      match /memberships/{projectId} {
        allow read, write: if isSignedIn() && request.auth.uid == uid;
      }
    }
    // === collectionGroup('tasks') 用 ===
    // Schedule 画面は tasks のコレクショングループを読むので、これが無いと PERMISSION DENIED になります。
    match /{path=**}/tasks/{taskId} {
    // 各 Task に projectId フィールドが入っている前提（あなたの実装では create 時に入れている）
    allow read: if isMember(resource.data.projectId);
    // ※ 読み取りだけで十分。書き込みも通すなら↓を追加（必要なければ入れない方が安全）
    // allow create, update, delete: if isEditor(request.resource.data.projectId);
    }
  }
}
